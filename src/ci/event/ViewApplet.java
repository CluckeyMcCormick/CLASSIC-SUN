/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ci.event;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;


/**
 *
 * @author cluckeymccormick
 */
public class ViewApplet extends javax.swing.JApplet {

    private final String[] LOCATIONS = {
        "CSU Channel Islands Main Campus",
        "CSU Channel Islands Thousand Oaks Campus",
        "CSU Channel Islands Santa Barbara Campus",
        "Santa Rosa Island Research Station"
    };
    
    private final String[] WEATHER_LOCATIONS = {
        "Camarillo, CA",
        "Thousand Oaks, CA",
        "Santa Barbara, CA",
        "Channel Islands National Park, CA"
    };
    
    //Objects for database interaction
    private Controller controller;
    private View view;
    private Weather weather;
    
    //Objects for containing our current data
    private ArrayList<Event> relevantEvents;
    private User currentUser;
    private Event currentEvent;
    
    /**
     * Initializes the applet MyApplet
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold> 
        
        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        //Create the Connection Manager
        ConnectionManager conman = new ConnectionManager();
        //Create the Controller
        this.controller = new Controller(conman);
        //Create the View
        this.view = new View(conman);
        //Create the Weather
        this.weather = new Weather();
        
        //Create the model for our combo boxes
        ComboBoxModel<String> model = new DefaultComboBoxModel(this.LOCATIONS);
        
        //set the models
        this.createLocationCombo.setModel(model);
        this.manageEvLocationCombo.setModel(model);
        //Set the create panel to the default
        this.resetCreatePanel();
        this.resetLoginPanel();
        
        if(this.controller == null )
        {
            this.appWideMessage("Error intializing application - please restart!");
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cardContainer = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        loginUserLabel = new javax.swing.JLabel();
        loginUserField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        loginServLabel = new javax.swing.JLabel();
        loginScrollPane = new javax.swing.JScrollPane();
        loginServText = new javax.swing.JTextArea();
        loginCreateButton = new javax.swing.JButton();
        mainMenuPanel = new javax.swing.JPanel();
        mainInviteButton = new javax.swing.JButton();
        mainCrtEvtButton = new javax.swing.JButton();
        mainMngEvtButton = new javax.swing.JButton();
        mainAdminButton = new javax.swing.JButton();
        mainServLabel = new javax.swing.JLabel();
        mainScrollPane = new javax.swing.JScrollPane();
        mainServText = new javax.swing.JTextArea();
        mainLogoutButton = new javax.swing.JButton();
        invitePanel = new javax.swing.JPanel();
        inviteEvNameScroll = new javax.swing.JScrollPane();
        inviteEvNameList = new javax.swing.JList();
        inviteEvNameLabel = new javax.swing.JLabel();
        inviteAcceptButton = new javax.swing.JButton();
        inviteRejectButton = new javax.swing.JButton();
        inviteDescriptionScroll = new javax.swing.JScrollPane();
        inviteDescriptionText = new javax.swing.JTextArea();
        inviteDateField = new javax.swing.JTextField();
        inviteDateLabel = new javax.swing.JLabel();
        inviteLocationLabel = new javax.swing.JLabel();
        inviteLocationField = new javax.swing.JTextField();
        inviteDescriptionLabel = new javax.swing.JLabel();
        inviteSenderField = new javax.swing.JTextField();
        inviteSenderLabel = new javax.swing.JLabel();
        inviteMainButton = new javax.swing.JButton();
        createEvPanel = new javax.swing.JPanel();
        createNameLabel = new javax.swing.JLabel();
        createNameField = new javax.swing.JTextField();
        createDateLabel = new javax.swing.JLabel();
        createDateField = new javax.swing.JTextField();
        createWeatherPanel = new javax.swing.JPanel();
        cWeatherPartlyRadio = new javax.swing.JRadioButton();
        cWeatherClearRadio = new javax.swing.JRadioButton();
        cWeatherScatteredRadio = new javax.swing.JRadioButton();
        cWeatherMostlyRadio = new javax.swing.JRadioButton();
        cWeatherOvercastRadio = new javax.swing.JRadioButton();
        cWeatherChanceRadio = new javax.swing.JRadioButton();
        cWeatherWarningField = new javax.swing.JTextField();
        cWeatherRainRadio = new javax.swing.JRadioButton();
        cWeatherDrizzleRadio = new javax.swing.JRadioButton();
        cWeatherFogRadio = new javax.swing.JRadioButton();
        cWeatherMistRadio = new javax.swing.JRadioButton();
        cWeatherSnowRadio = new javax.swing.JRadioButton();
        cWeatherHailRadio = new javax.swing.JRadioButton();
        cWeatherStormRadio = new javax.swing.JRadioButton();
        cWeatherWarningLabel = new javax.swing.JLabel();
        createServerLabel = new javax.swing.JLabel();
        createServerScroll = new javax.swing.JScrollPane();
        createServerText = new javax.swing.JTextArea();
        createMainButton = new javax.swing.JButton();
        createLocationLabel = new javax.swing.JLabel();
        createLocationCombo = new javax.swing.JComboBox();
        createDescriptionLabel = new javax.swing.JLabel();
        createDescriptionPane = new javax.swing.JScrollPane();
        createDescriptionText = new javax.swing.JTextArea();
        createCreateButton = new javax.swing.JButton();
        chooseEvPanel = new javax.swing.JPanel();
        chooseScroll = new javax.swing.JScrollPane();
        chooseEvList = new javax.swing.JList();
        chooseEvLabel = new javax.swing.JLabel();
        chooseChooseButton = new javax.swing.JButton();
        chooseMainButton = new javax.swing.JButton();
        manageEvTab = new javax.swing.JTabbedPane();
        manageCreatePanel = new javax.swing.JPanel();
        manageEvNameLabel = new javax.swing.JLabel();
        manageEvNameField = new javax.swing.JTextField();
        manageEvDateLabel = new javax.swing.JLabel();
        manageEvDateField = new javax.swing.JTextField();
        manageEvWeatherPanel = new javax.swing.JPanel();
        mWeatherPartlyRadio = new javax.swing.JRadioButton();
        mWeatherClearRadio = new javax.swing.JRadioButton();
        mWeatherScatteredRadio = new javax.swing.JRadioButton();
        mWeatherMostlyRadio = new javax.swing.JRadioButton();
        mWeatherOvercastRadio = new javax.swing.JRadioButton();
        mWeatherChanceRadio = new javax.swing.JRadioButton();
        mWeatherWarningField = new javax.swing.JTextField();
        mWeatherRainRadio = new javax.swing.JRadioButton();
        mWeatherDrizzleRadio = new javax.swing.JRadioButton();
        mWeatherFogRadio = new javax.swing.JRadioButton();
        mWeatherMistRadio = new javax.swing.JRadioButton();
        mWeatherSnowRadio = new javax.swing.JRadioButton();
        mWeatherHailRadio = new javax.swing.JRadioButton();
        mWeatherStormRadio = new javax.swing.JRadioButton();
        mWeatherWarningLabel = new javax.swing.JLabel();
        manageEvServerLabel = new javax.swing.JLabel();
        manageEvServerScroll = new javax.swing.JScrollPane();
        manageEvServerText = new javax.swing.JTextArea();
        manageEvMainButton = new javax.swing.JButton();
        manageEvLocationLabel = new javax.swing.JLabel();
        manageEvLocationCombo = new javax.swing.JComboBox();
        manageEvDescriptionLabel = new javax.swing.JLabel();
        manageEvDescriptionScroll = new javax.swing.JScrollPane();
        manageEvDescriptionText = new javax.swing.JTextArea();
        manageEvUpdateButton = new javax.swing.JButton();
        manageEvChooseButton = new javax.swing.JButton();
        manageEvResetButton = new javax.swing.JButton();
        manageInvitePanel = new javax.swing.JPanel();
        manageInvInvitedLabel = new javax.swing.JLabel();
        manageInvAttendingLabel = new javax.swing.JLabel();
        manageInvInvitedScroll = new javax.swing.JScrollPane();
        manageInvInvitedList = new javax.swing.JList();
        manageInvAttendScroll = new javax.swing.JScrollPane();
        manageInvAttendList = new javax.swing.JList();
        manageInvInviteButton = new javax.swing.JButton();
        manageInvInviteField = new javax.swing.JTextField();
        manageInvServerLabel = new javax.swing.JLabel();
        manageInvServerScroll = new javax.swing.JScrollPane();
        manageInvServerText = new javax.swing.JTextArea();
        manageInvMainButton = new javax.swing.JButton();
        manageInvChooseButton = new javax.swing.JButton();
        manageDeletePanel = new javax.swing.JPanel();
        manageDeleteButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(600, 475));

        cardContainer.setLayout(new java.awt.CardLayout());

        loginPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Login"));

        loginUserLabel.setText("E-Mail:");

        loginUserField.setText("default");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        loginServLabel.setText("Server Message");

        loginServText.setEditable(false);
        loginServText.setColumns(20);
        loginServText.setLineWrap(true);
        loginServText.setRows(5);
        loginServText.setTabSize(4);
        loginServText.setText("This box provides feedback information - like \"username doesn't exist\" or \"incorrect password\". I doubt we even need passwords. Of course, this brings up the question of how we make new users - perhaps we could have a \"Create User\" button next to the login button.");
        loginServText.setToolTipText("");
        loginServText.setWrapStyleWord(true);
        loginScrollPane.setViewportView(loginServText);

        loginCreateButton.setText("Create User");
        loginCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginCreateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginScrollPane)
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addComponent(loginServLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addComponent(loginUserLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(loginPanelLayout.createSequentialGroup()
                                .addComponent(loginButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loginCreateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 318, Short.MAX_VALUE))
                            .addComponent(loginUserField))))
                .addContainerGap())
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginUserLabel)
                    .addComponent(loginUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton)
                    .addComponent(loginCreateButton))
                .addGap(18, 18, 18)
                .addComponent(loginServLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardContainer.add(loginPanel, "login");

        mainMenuPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Main Menu"));

        mainInviteButton.setText("Invites");
        mainInviteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainInviteButtonActionPerformed(evt);
            }
        });

        mainCrtEvtButton.setText("Create Event");
        mainCrtEvtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainCrtEvtButtonActionPerformed(evt);
            }
        });

        mainMngEvtButton.setText("Manage Events");
        mainMngEvtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMngEvtButtonActionPerformed(evt);
            }
        });

        mainAdminButton.setText("Admin Options");

        mainServLabel.setText("Server Messages");

        mainServText.setEditable(false);
        mainServText.setColumns(20);
        mainServText.setLineWrap(true);
        mainServText.setRows(5);
        mainServText.setText("This will display a greeting of some kind. It'd also be nice to tell the user how many messages they have, or some other such information. \"Admin Options\" doesn't have to be included in the final product; that's where we'd put any debugging commands, buttons, and other such nonsense. ");
        mainServText.setWrapStyleWord(true);
        mainScrollPane.setViewportView(mainServText);

        mainLogoutButton.setText("Logout");
        mainLogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainLogoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenuPanelLayout = new javax.swing.GroupLayout(mainMenuPanel);
        mainMenuPanel.setLayout(mainMenuPanelLayout);
        mainMenuPanelLayout.setHorizontalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addComponent(mainCrtEvtButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainInviteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainMngEvtButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainAdminButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainMenuPanelLayout.createSequentialGroup()
                        .addComponent(mainServLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mainLogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainMenuPanelLayout.setVerticalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainInviteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainCrtEvtButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainMngEvtButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainAdminButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainLogoutButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainServLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardContainer.add(mainMenuPanel, "main");

        invitePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Invites"));

        inviteEvNameList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        inviteEvNameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        inviteEvNameList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                inviteEvNameListValueChanged(evt);
            }
        });
        inviteEvNameScroll.setViewportView(inviteEvNameList);

        inviteEvNameLabel.setText("Event Names");

        inviteAcceptButton.setText("Accept Invite");
        inviteAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteAcceptButtonActionPerformed(evt);
            }
        });

        inviteRejectButton.setText("Reject Invite");
        inviteRejectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteRejectButtonActionPerformed(evt);
            }
        });

        inviteDescriptionText.setEditable(false);
        inviteDescriptionText.setColumns(20);
        inviteDescriptionText.setLineWrap(true);
        inviteDescriptionText.setRows(5);
        inviteDescriptionText.setText("The above list will present the subjects of all waiting messages. We can write custom code for this by right-clicking the list, going to properties, navigating to properties>model, and choose custom code.\n\nNotice the buttons found below. We'll need to separate the two type of messages: Invites, and Messages. Logic suggests that we'll want to have Message as a class, and Invite will inherit from it. Anyway, if the currently selected message is not an Invite type, we'll make the appropriate buttons to the lower left \"grey out\".");
        inviteDescriptionText.setWrapStyleWord(true);
        inviteDescriptionScroll.setViewportView(inviteDescriptionText);

        inviteDateField.setEditable(false);
        inviteDateField.setText("Event Date");

        inviteDateLabel.setText("Event Date");

        inviteLocationLabel.setText("Event Location");

        inviteLocationField.setEditable(false);
        inviteLocationField.setText("Event Location");

        inviteDescriptionLabel.setText("Event Description");

        inviteSenderField.setEditable(false);
        inviteSenderField.setText("Name of Event Creator");

        inviteSenderLabel.setText("Event Creator");

        inviteMainButton.setText("Main Menu");
        inviteMainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteMainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout invitePanelLayout = new javax.swing.GroupLayout(invitePanel);
        invitePanel.setLayout(invitePanelLayout);
        invitePanelLayout.setHorizontalGroup(
            invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invitePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inviteDescriptionScroll)
                    .addGroup(invitePanelLayout.createSequentialGroup()
                        .addComponent(inviteAcceptButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inviteRejectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(inviteMainButton))
                    .addGroup(invitePanelLayout.createSequentialGroup()
                        .addGroup(invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inviteEvNameScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inviteEvNameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inviteDateField)
                            .addComponent(inviteSenderField, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                            .addComponent(inviteLocationField)
                            .addGroup(invitePanelLayout.createSequentialGroup()
                                .addGroup(invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inviteSenderLabel)
                                    .addComponent(inviteDateLabel)
                                    .addComponent(inviteLocationLabel))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(invitePanelLayout.createSequentialGroup()
                        .addComponent(inviteDescriptionLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        invitePanelLayout.setVerticalGroup(
            invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invitePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inviteEvNameLabel)
                    .addComponent(inviteSenderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(invitePanelLayout.createSequentialGroup()
                        .addComponent(inviteSenderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inviteDateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inviteDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(inviteLocationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inviteLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inviteEvNameScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inviteDescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inviteDescriptionScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(invitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inviteAcceptButton)
                    .addComponent(inviteRejectButton)
                    .addComponent(inviteMainButton))
                .addContainerGap())
        );

        cardContainer.add(invitePanel, "invite");

        createEvPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Create Event"));

        createNameLabel.setText("Event Name");

        createNameField.setText("jTextField4");

        createDateLabel.setText("Event Date");

        createDateField.setText("mm/dd/yyyy");

        createWeatherPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Weather Options"));

        cWeatherPartlyRadio.setSelected(true);
        cWeatherPartlyRadio.setText("Partly Cloudy");

        cWeatherClearRadio.setSelected(true);
        cWeatherClearRadio.setText("Clear");

        cWeatherScatteredRadio.setSelected(true);
        cWeatherScatteredRadio.setText("Scattered Clouds");

        cWeatherMostlyRadio.setSelected(true);
        cWeatherMostlyRadio.setText("Mostly Cloudy");

        cWeatherOvercastRadio.setSelected(true);
        cWeatherOvercastRadio.setText("Overcast");

        cWeatherChanceRadio.setSelected(true);
        cWeatherChanceRadio.setText("Chance of Rain");

        cWeatherWarningField.setText("X Days");

        cWeatherRainRadio.setSelected(true);
        cWeatherRainRadio.setText("Rain");

        cWeatherDrizzleRadio.setSelected(true);
        cWeatherDrizzleRadio.setText("Drizzle");

        cWeatherFogRadio.setSelected(true);
        cWeatherFogRadio.setText("Fog");

        cWeatherMistRadio.setSelected(true);
        cWeatherMistRadio.setText("Mist");

        cWeatherSnowRadio.setSelected(true);
        cWeatherSnowRadio.setText("Snow");

        cWeatherHailRadio.setSelected(true);
        cWeatherHailRadio.setText("Hail");

        cWeatherStormRadio.setSelected(true);
        cWeatherStormRadio.setText("Storm");

        cWeatherWarningLabel.setText("Warning Period");

        javax.swing.GroupLayout createWeatherPanelLayout = new javax.swing.GroupLayout(createWeatherPanel);
        createWeatherPanel.setLayout(createWeatherPanelLayout);
        createWeatherPanelLayout.setHorizontalGroup(
            createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createWeatherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cWeatherScatteredRadio)
                    .addComponent(cWeatherClearRadio)
                    .addComponent(cWeatherPartlyRadio)
                    .addComponent(cWeatherMostlyRadio)
                    .addComponent(cWeatherOvercastRadio)
                    .addComponent(cWeatherChanceRadio)
                    .addComponent(cWeatherWarningField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cWeatherWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cWeatherStormRadio)
                    .addComponent(cWeatherHailRadio)
                    .addComponent(cWeatherSnowRadio)
                    .addComponent(cWeatherDrizzleRadio)
                    .addComponent(cWeatherRainRadio)
                    .addComponent(cWeatherFogRadio)
                    .addComponent(cWeatherMistRadio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        createWeatherPanelLayout.setVerticalGroup(
            createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createWeatherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cWeatherClearRadio)
                    .addComponent(cWeatherDrizzleRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cWeatherScatteredRadio)
                    .addComponent(cWeatherRainRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cWeatherPartlyRadio)
                    .addComponent(cWeatherFogRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cWeatherMostlyRadio)
                    .addComponent(cWeatherMistRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cWeatherOvercastRadio)
                    .addComponent(cWeatherSnowRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cWeatherChanceRadio)
                    .addComponent(cWeatherHailRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cWeatherStormRadio)
                    .addComponent(cWeatherWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cWeatherWarningField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        createServerLabel.setText("Server Messages");

        createServerText.setEditable(false);
        createServerText.setColumns(20);
        createServerText.setLineWrap(true);
        createServerText.setRows(5);
        createServerText.setWrapStyleWord(true);
        createServerScroll.setViewportView(createServerText);

        createMainButton.setText("Main Menu");
        createMainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMainButtonActionPerformed(evt);
            }
        });

        createLocationLabel.setText("Location");

        createDescriptionLabel.setText("Event Description");

        createDescriptionText.setColumns(20);
        createDescriptionText.setLineWrap(true);
        createDescriptionText.setRows(5);
        createDescriptionText.setWrapStyleWord(true);
        createDescriptionPane.setViewportView(createDescriptionText);

        createCreateButton.setText("Create Event");
        createCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCreateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout createEvPanelLayout = new javax.swing.GroupLayout(createEvPanel);
        createEvPanel.setLayout(createEvPanelLayout);
        createEvPanelLayout.setHorizontalGroup(
            createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createEvPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createEvPanelLayout.createSequentialGroup()
                        .addComponent(createServerLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(createEvPanelLayout.createSequentialGroup()
                        .addGroup(createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(createEvPanelLayout.createSequentialGroup()
                                .addComponent(createWeatherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(createDescriptionPane)
                                    .addGroup(createEvPanelLayout.createSequentialGroup()
                                        .addComponent(createLocationLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(createLocationCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createEvPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createEvPanelLayout.createSequentialGroup()
                                                .addComponent(createCreateButton)
                                                .addGap(77, 77, 77))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createEvPanelLayout.createSequentialGroup()
                                                .addComponent(createDescriptionLabel)
                                                .addGap(100, 100, 100))))))
                            .addGroup(createEvPanelLayout.createSequentialGroup()
                                .addComponent(createServerScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(createMainButton))
                            .addGroup(createEvPanelLayout.createSequentialGroup()
                                .addComponent(createNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createNameField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        createEvPanelLayout.setVerticalGroup(
            createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createEvPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createNameLabel)
                    .addComponent(createNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(createEvPanelLayout.createSequentialGroup()
                        .addGroup(createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createLocationLabel)
                            .addComponent(createLocationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createDescriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createDescriptionPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createCreateButton))
                    .addComponent(createWeatherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createServerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createEvPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(createMainButton))
                    .addComponent(createServerScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                .addContainerGap())
        );

        cardContainer.add(createEvPanel, "create");

        chooseEvPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Event"));

        chooseEvList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        chooseScroll.setViewportView(chooseEvList);

        chooseEvLabel.setText("Your Events");

        chooseChooseButton.setText("Choose");
        chooseChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseChooseButtonActionPerformed(evt);
            }
        });

        chooseMainButton.setText("Main Menu");
        chooseMainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chooseEvPanelLayout = new javax.swing.GroupLayout(chooseEvPanel);
        chooseEvPanel.setLayout(chooseEvPanelLayout);
        chooseEvPanelLayout.setHorizontalGroup(
            chooseEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseEvPanelLayout.createSequentialGroup()
                .addContainerGap(139, Short.MAX_VALUE)
                .addGroup(chooseEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chooseEvPanelLayout.createSequentialGroup()
                        .addGroup(chooseEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chooseScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(chooseEvPanelLayout.createSequentialGroup()
                                .addComponent(chooseEvLabel)
                                .addGap(111, 111, 111)))
                        .addGap(131, 131, 131))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chooseEvPanelLayout.createSequentialGroup()
                        .addComponent(chooseChooseButton)
                        .addGap(243, 243, 243))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chooseEvPanelLayout.createSequentialGroup()
                        .addComponent(chooseMainButton)
                        .addContainerGap())))
        );
        chooseEvPanelLayout.setVerticalGroup(
            chooseEvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseEvPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseEvLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseChooseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addComponent(chooseMainButton)
                .addContainerGap())
        );

        cardContainer.add(chooseEvPanel, "choose");

        manageCreatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Manage Event"));

        manageEvNameLabel.setText("Event Name");

        manageEvNameField.setText("jTextField4");

        manageEvDateLabel.setText("Event Date");

        manageEvDateField.setText("mm/dd/yyyy");

        manageEvWeatherPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Weather Options"));

        mWeatherPartlyRadio.setSelected(true);
        mWeatherPartlyRadio.setText("Partly Cloudy");

        mWeatherClearRadio.setSelected(true);
        mWeatherClearRadio.setText("Clear");

        mWeatherScatteredRadio.setSelected(true);
        mWeatherScatteredRadio.setText("Scattered Clouds");

        mWeatherMostlyRadio.setSelected(true);
        mWeatherMostlyRadio.setText("Mostly Cloudy");

        mWeatherOvercastRadio.setSelected(true);
        mWeatherOvercastRadio.setText("Overcast");

        mWeatherChanceRadio.setSelected(true);
        mWeatherChanceRadio.setText("Chance of Rain");

        mWeatherWarningField.setText("X Days");

        mWeatherRainRadio.setSelected(true);
        mWeatherRainRadio.setText("Rain");

        mWeatherDrizzleRadio.setSelected(true);
        mWeatherDrizzleRadio.setText("Drizzle");

        mWeatherFogRadio.setSelected(true);
        mWeatherFogRadio.setText("Fog");

        mWeatherMistRadio.setSelected(true);
        mWeatherMistRadio.setText("Mist");

        mWeatherSnowRadio.setSelected(true);
        mWeatherSnowRadio.setText("Snow");

        mWeatherHailRadio.setSelected(true);
        mWeatherHailRadio.setText("Hail");

        mWeatherStormRadio.setSelected(true);
        mWeatherStormRadio.setText("Storm");

        mWeatherWarningLabel.setText("Warning Period");

        javax.swing.GroupLayout manageEvWeatherPanelLayout = new javax.swing.GroupLayout(manageEvWeatherPanel);
        manageEvWeatherPanel.setLayout(manageEvWeatherPanelLayout);
        manageEvWeatherPanelLayout.setHorizontalGroup(
            manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEvWeatherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mWeatherScatteredRadio)
                    .addComponent(mWeatherClearRadio)
                    .addComponent(mWeatherPartlyRadio)
                    .addComponent(mWeatherMostlyRadio)
                    .addComponent(mWeatherOvercastRadio)
                    .addComponent(mWeatherChanceRadio)
                    .addComponent(mWeatherWarningField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mWeatherWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mWeatherStormRadio)
                    .addComponent(mWeatherHailRadio)
                    .addComponent(mWeatherSnowRadio)
                    .addComponent(mWeatherDrizzleRadio)
                    .addComponent(mWeatherRainRadio)
                    .addComponent(mWeatherFogRadio)
                    .addComponent(mWeatherMistRadio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        manageEvWeatherPanelLayout.setVerticalGroup(
            manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEvWeatherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mWeatherClearRadio)
                    .addComponent(mWeatherDrizzleRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mWeatherScatteredRadio)
                    .addComponent(mWeatherRainRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mWeatherPartlyRadio)
                    .addComponent(mWeatherFogRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mWeatherMostlyRadio)
                    .addComponent(mWeatherMistRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mWeatherOvercastRadio)
                    .addComponent(mWeatherSnowRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mWeatherChanceRadio)
                    .addComponent(mWeatherHailRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageEvWeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mWeatherStormRadio)
                    .addComponent(mWeatherWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mWeatherWarningField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        manageEvServerLabel.setText("Server Messages");

        manageEvServerText.setEditable(false);
        manageEvServerText.setColumns(20);
        manageEvServerText.setLineWrap(true);
        manageEvServerText.setRows(5);
        manageEvServerText.setWrapStyleWord(true);
        manageEvServerScroll.setViewportView(manageEvServerText);

        manageEvMainButton.setText("Main Menu");
        manageEvMainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEvMainButtonActionPerformed(evt);
            }
        });

        manageEvLocationLabel.setText("Location");

        manageEvLocationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        manageEvDescriptionLabel.setText("Event Description");

        manageEvDescriptionText.setColumns(20);
        manageEvDescriptionText.setLineWrap(true);
        manageEvDescriptionText.setRows(5);
        manageEvDescriptionText.setWrapStyleWord(true);
        manageEvDescriptionScroll.setViewportView(manageEvDescriptionText);

        manageEvUpdateButton.setText("Update Event");
        manageEvUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEvUpdateButtonActionPerformed(evt);
            }
        });

        manageEvChooseButton.setText("Choose Event");
        manageEvChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEvChooseButtonActionPerformed(evt);
            }
        });

        manageEvResetButton.setText("Reset To Event");
        manageEvResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEvResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageCreatePanelLayout = new javax.swing.GroupLayout(manageCreatePanel);
        manageCreatePanel.setLayout(manageCreatePanelLayout);
        manageCreatePanelLayout.setHorizontalGroup(
            manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCreatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCreatePanelLayout.createSequentialGroup()
                        .addComponent(manageEvWeatherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manageEvDescriptionScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                            .addGroup(manageCreatePanelLayout.createSequentialGroup()
                                .addComponent(manageEvLocationLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manageEvLocationCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageCreatePanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(manageEvDescriptionLabel)
                                .addGap(103, 103, 103))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageCreatePanelLayout.createSequentialGroup()
                                .addComponent(manageEvUpdateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(manageEvResetButton))))
                    .addGroup(manageCreatePanelLayout.createSequentialGroup()
                        .addComponent(manageEvNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageEvNameField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageEvDateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageEvDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageCreatePanelLayout.createSequentialGroup()
                        .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCreatePanelLayout.createSequentialGroup()
                                .addComponent(manageEvServerLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(manageEvServerScroll))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manageEvMainButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(manageEvChooseButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        manageCreatePanelLayout.setVerticalGroup(
            manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCreatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageEvNameLabel)
                    .addComponent(manageEvNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageEvDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageEvDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageEvWeatherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(manageCreatePanelLayout.createSequentialGroup()
                        .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(manageEvLocationLabel)
                            .addComponent(manageEvLocationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageEvDescriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageEvDescriptionScroll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(manageEvUpdateButton)
                            .addComponent(manageEvResetButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manageCreatePanelLayout.createSequentialGroup()
                        .addComponent(manageEvServerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageEvServerScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageCreatePanelLayout.createSequentialGroup()
                        .addComponent(manageEvChooseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageEvMainButton)))
                .addContainerGap())
        );

        manageEvTab.addTab("Manage Event", manageCreatePanel);

        manageInvitePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Invitees & Attendees"));

        manageInvInvitedLabel.setText("Invited");

        manageInvAttendingLabel.setText("Attending");

        manageInvInvitedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        manageInvInvitedScroll.setViewportView(manageInvInvitedList);

        manageInvAttendList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        manageInvAttendScroll.setViewportView(manageInvAttendList);

        manageInvInviteButton.setText("Invite");
        manageInvInviteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageInvInviteButtonActionPerformed(evt);
            }
        });

        manageInvInviteField.setText("jTextField1");

        manageInvServerLabel.setText("Server Messages");

        manageInvServerText.setEditable(false);
        manageInvServerText.setColumns(20);
        manageInvServerText.setLineWrap(true);
        manageInvServerText.setRows(5);
        manageInvServerText.setWrapStyleWord(true);
        manageInvServerScroll.setViewportView(manageInvServerText);

        manageInvMainButton.setText("Main Menu");
        manageInvMainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageInvMainButtonActionPerformed(evt);
            }
        });

        manageInvChooseButton.setText("Choose Event");
        manageInvChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageInvChooseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageInvitePanelLayout = new javax.swing.GroupLayout(manageInvitePanel);
        manageInvitePanel.setLayout(manageInvitePanelLayout);
        manageInvitePanelLayout.setHorizontalGroup(
            manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageInvitePanelLayout.createSequentialGroup()
                .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageInvitePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(manageInvInvitedScroll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(manageInvitePanelLayout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(manageInvInvitedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageInvitePanelLayout.createSequentialGroup()
                        .addComponent(manageInvAttendScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageInvitePanelLayout.createSequentialGroup()
                        .addComponent(manageInvAttendingLabel)
                        .addGap(110, 110, 110))))
            .addGroup(manageInvitePanelLayout.createSequentialGroup()
                .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageInvitePanelLayout.createSequentialGroup()
                        .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageInvitePanelLayout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(manageInvInviteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manageInvInviteField, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(manageInvitePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(manageInvServerLabel)))
                        .addGap(0, 47, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageInvitePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(manageInvServerScroll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manageInvMainButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(manageInvChooseButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        manageInvitePanelLayout.setVerticalGroup(
            manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageInvitePanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageInvAttendingLabel)
                    .addComponent(manageInvInvitedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(manageInvAttendScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(manageInvInvitedScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageInvInviteButton)
                    .addComponent(manageInvInviteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageInvServerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageInvitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageInvitePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(manageInvChooseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageInvMainButton))
                    .addComponent(manageInvServerScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                .addContainerGap())
        );

        manageEvTab.addTab("Invitees & Attendees", manageInvitePanel);

        manageDeletePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Delete Event"));

        manageDeleteButton.setBackground(new java.awt.Color(243, 59, 61));
        manageDeleteButton.setText("Delete");
        manageDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageDeletePanelLayout = new javax.swing.GroupLayout(manageDeletePanel);
        manageDeletePanel.setLayout(manageDeletePanelLayout);
        manageDeletePanelLayout.setHorizontalGroup(
            manageDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDeletePanelLayout.createSequentialGroup()
                .addGap(238, 238, 238)
                .addComponent(manageDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(241, Short.MAX_VALUE))
        );
        manageDeletePanelLayout.setVerticalGroup(
            manageDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDeletePanelLayout.createSequentialGroup()
                .addContainerGap(164, Short.MAX_VALUE)
                .addComponent(manageDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152))
        );

        manageEvTab.addTab("Delete Event", manageDeletePanel);

        cardContainer.add(manageEvTab, "manage");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cardContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cardContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 457, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mainInviteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainInviteButtonActionPerformed
        this.setInviteFieldBlankState();
        this.currentUser = this.view.getUser(this.currentUser.getEmail());
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "invite");
    }//GEN-LAST:event_mainInviteButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        ServerResponse serRes;
        
        //Tell the user we're processing, disable
        this.loginServText.setText("Processing request...");
        this.setEnabledLoginPanel(false);
        
        if(this.loginUserField.getText().contains("'"))
        {
            this.loginServText.setText("Email can contain no single quotes!");
        }
        else
        {
            //If this user is in the database
            serRes = this.controller.checkForUser(new User(this.loginUserField.getText()));
            if(serRes.getSuccess())
            {
                this.currentUser = this.view.getUser(this.loginUserField.getText());
                this.resetMainPanel();
                //Switch to main menu
                CardLayout cl = (CardLayout)(cardContainer.getLayout());
                cl.show(cardContainer, "main");
            
                this.resetLoginPanel();
            }
            else
            {
                this.loginServText.setText(serRes.getMessage());
            }   
        }
        this.setEnabledLoginPanel(true);
    }//GEN-LAST:event_loginButtonActionPerformed

    private void mainCrtEvtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainCrtEvtButtonActionPerformed
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "create");
    }//GEN-LAST:event_mainCrtEvtButtonActionPerformed

    private void mainMngEvtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMngEvtButtonActionPerformed
        this.setChooseFields();
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "choose");
    }//GEN-LAST:event_mainMngEvtButtonActionPerformed

    private void mainLogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainLogoutButtonActionPerformed
        currentUser = null;
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "login");
    }//GEN-LAST:event_mainLogoutButtonActionPerformed

    private void createMainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMainButtonActionPerformed
        this.resetMainPanel();
        this.currentUser = this.view.getUser(this.currentUser.getEmail());
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "main");
    }//GEN-LAST:event_createMainButtonActionPerformed

    private void chooseChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseChooseButtonActionPerformed
        int index;
        
        //Get the user's selection
        index = this.chooseEvList.getSelectedIndex();
        
        if(index > -1)
        {
            //set
            this.currentEvent = this.relevantEvents.get(index);
            
            //Set all the fields using the event data
            this.setManageFields();
            
            //switch screens
            CardLayout cl = (CardLayout)(cardContainer.getLayout());
            cl.show(cardContainer, "manage");
        }
    }//GEN-LAST:event_chooseChooseButtonActionPerformed

    private void chooseMainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMainButtonActionPerformed
        this.relevantEvents = null; 
        this.resetMainPanel();
        this.currentUser = this.view.getUser(this.currentUser.getEmail());
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "main");
    }//GEN-LAST:event_chooseMainButtonActionPerformed

    private void inviteMainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteMainButtonActionPerformed
        this.currentEvent = null;
        this.setInviteFieldBlankState();
        this.relevantEvents = null;
        this.resetMainPanel();
        this.currentUser = this.view.getUser(this.currentUser.getEmail());
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "main");
    }//GEN-LAST:event_inviteMainButtonActionPerformed

    private void manageEvMainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEvMainButtonActionPerformed
        this.currentEvent = null;
        this.relevantEvents = null; 
        this.currentUser = this.view.getUser(this.currentUser.getEmail());
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "main");
    }//GEN-LAST:event_manageEvMainButtonActionPerformed

    private void createCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCreateButtonActionPerformed
        //The acceptable weather for this event
        ArrayList<String> goodWeather;
        //The name of the event
        String evName;
        //The date of the event
        Calendar date;
        //Today's date
        Calendar today;
        //The warning period for changing weather
        Integer warning;
        //The date, "warning period" days before 
        Calendar warnDate;
        //The event's decription
        String description;
        //The event's location
        String location;
        //The server's response - everything that went wrong.
        StringBuilder response;
        //Is this a valid event?
        boolean valid;
        
        //Tell the user we're processing
        this.createServerText.setText("Processing request...");
        //Disable the buttons - we don't want users messing things up
        this.setEnabledCreatePanel(false);
        
        //intialize!
        valid = true;
        response = new StringBuilder();
        //get weather things
        goodWeather = getCreateWeather();
        //get event name
        evName = this.createNameField.getText();
        //Get today's date
        today = Calendar.getInstance();
        
        //parse the user's date entry
        try{
            date = Factory.stringToCalendar(this.createDateField.getText());
        }
        catch(Exception e)
        {
            valid = false;
            date = null;
            response.append("Event Rejected:\n");
            response.append("Could not parse provided event date!\n");
        }
        
        //parse the user's warning period entry
        try{
            warning = Integer.parseInt(this.cWeatherWarningField.getText());
        }
        catch(Exception e){
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:");
            }  
            response.append("Could not parse warning period.\n");    
            warning = null;
        }
        
        if(warning != null && date != null)
        {
            //calculate the warning date
            warnDate = (Calendar) date.clone();
            warnDate.add(Calendar.DAY_OF_MONTH, -warning);
        }
        else
        {
            warnDate = null;
        }
        
        //get the description
        description = this.createDescriptionText.getText();
        if(this.createLocationCombo.getSelectedIndex() == -1)
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }  
            response.append("No location was selected!\n");
            location = null;
        }
        else
        {
            //get the location
            location = this.LOCATIONS[this.createLocationCombo.getSelectedIndex()];
        }
        
        if(evName.equals(""))
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }  
            response.append("Event name was an empty string!\n");
        }
        
        if(date != null && date.before(today))
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }           
            response.append("The event date, ");
            response.append(Factory.calendarToString(date));
            response.append(" has already passed!\n");
        }
        
        if(warnDate != null && today.after(warnDate))
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }       
            response.append("The warning date, ");
            response.append(Factory.calendarToString(warnDate));
            response.append(" has already passed!\n");
        }
        
        if(warning != null && warning == 0)
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }           
            response.append("The warning period was zero!\n");
        }
        
        if(warning != null && warning > 10)
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }           
            response.append("The warning period was larger than 10!\n");
        }
        
        //If it's all valid
        if(valid)
        {
            ServerResponse resp;
            
            //Create event object as currentEvent
            this.currentEvent = 
            new Event(evName, currentUser.getEmail(), date, location, warning, goodWeather, description);
            //Add to database
            resp = this.controller.addEvent(this.currentEvent);
            this.createServerText.setText(resp.getMessage());
            if(resp.getSuccess()){
                //Get list of user's created events from database
                this.relevantEvents = this.view.getEventsCreated(currentUser);
                //Switch cards    
                CardLayout cl = (CardLayout)(cardContainer.getLayout());
                cl.show(cardContainer, "manage");
                //Set the fields of update to match currentEvent
                this.setManageFields();
                //Reset the create screen
                this.resetCreatePanel();    
            }     
        }
        else
        {
            //Tell the user what went wrong
            this.createServerText.setText(response.toString());
            //Re-enable everything
            this.setEnabledCreatePanel(true);
        }
    }//GEN-LAST:event_createCreateButtonActionPerformed

    private void manageEvChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEvChooseButtonActionPerformed
        this.currentEvent = null;
        this.setChooseFields();
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "choose");
    }//GEN-LAST:event_manageEvChooseButtonActionPerformed

    private void manageInvChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageInvChooseButtonActionPerformed
        this.currentEvent = null;
        this.setChooseFields();
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "choose");
    }//GEN-LAST:event_manageInvChooseButtonActionPerformed

    private void manageInvMainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageInvMainButtonActionPerformed
        this.currentEvent = null;
        this.relevantEvents = null; 
        this.resetMainPanel();
        this.currentUser = this.view.getUser(this.currentUser.getEmail());
        CardLayout cl = (CardLayout)(cardContainer.getLayout());
        cl.show(cardContainer, "main");
    }//GEN-LAST:event_manageInvMainButtonActionPerformed

    private void manageEvResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEvResetButtonActionPerformed
        this.setManageFields();
    }//GEN-LAST:event_manageEvResetButtonActionPerformed

    private void manageEvUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEvUpdateButtonActionPerformed
        //The acceptable weather for this event
        ArrayList<String> goodWeather;
        //The name of the event
        String evName;
        //The date of the event
        Calendar date;
        //Today's date
        Calendar today;
        //The warning period for changing weather
        Integer warning;
        //The date, "warning period" days before 
        Calendar warnDate;
        //The event's decription
        String description;
        //The event's location
        String location;
        //The server's response - everything that went wrong.
        StringBuilder response;
        //Is this a valid event?
        boolean valid;
        
        //Tell the user we're processing
        this.manageEvServerText.setText("Processing request...");
        //Disable the buttons - we don't want users messing things up
        this.setEnabledManagePanel(false);
        
        //intialize!
        valid = true;
        response = new StringBuilder();
        //get weather things
        goodWeather = this.getManageWeather();
        //get event name
        evName = this.manageEvNameField.getText();
        //Get today's date
        today = Calendar.getInstance();
        
        //parse the user's date entry
        try{
            date = Factory.stringToCalendar(this.manageEvDateField.getText());
        }
        catch(Exception e)
        {
            valid = false;
            date = null;
            response.append("Event Rejected:\n");
            response.append("Could not parse provided event date!\n");
        }
        
        //parse the user's warning period entry
        try{
            warning = Integer.parseInt(this.mWeatherWarningField.getText());
        }
        catch(Exception e){
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:");
            }  
            response.append("Could not parse warning period.\n");    
            warning = null;
        }
        
        if(warning != null && date != null)
        {
            //calculate the warning date
            warnDate = (Calendar) date.clone();
            warnDate.add(Calendar.DAY_OF_MONTH, -warning);
        }
        else
        {
            warnDate = null;
        }
        
        //get the description
        description = this.manageEvDescriptionText.getText();
        if(this.manageEvLocationCombo.getSelectedIndex() == -1)
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }  
            response.append("No location was selected!\n");
            location = null;
        }
        else
        {
            //get the location
            location = this.LOCATIONS[this.manageEvLocationCombo.getSelectedIndex()];
        }
        
        if(evName.equals(""))
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }  
            response.append("Event name was an empty string!\n");
        }
        
        if(date != null && date.before(today))
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }           
            response.append("The event date, ");
            response.append(Factory.calendarToString(date));
            response.append(" has already passed!\n");
        }
        
        if(warnDate != null && today.after(warnDate))
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }       
            response.append("The warning date, ");
            response.append(Factory.calendarToString(warnDate));
            response.append(" has already passed!\n");
        }
        
        if(warning != null && warning < 0)
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }           
            response.append("The warning period was negative!\n");
        }
        
        if(warning != null && warning == 0)
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }           
            response.append("The warning period was zero!\n");
        }
        
        if(warning != null && warning > 10)
        {
            if(valid)
            {
                valid = false;
                response.append("Event Rejected:\n");
            }           
            response.append("The warning period was larger than 10!\n");
        }
        
        //If it's all valid
        if(valid)
        {
            ServerResponse resp;
            
            //Create event object
            Event e = new Event(
                evName, 
                currentUser.getEmail(), 
                date, 
                location, 
                warning, 
                goodWeather, 
                description,
                this.currentEvent.getInvited(),
                this.currentEvent.getAccepted()
            );
            //set the id
            e.setId(this.currentEvent.getId());
            //Add to database
            resp = this.controller.updateEvent(e);
            this.manageEvServerText.setText(resp.getMessage());
            
            if(resp.getSuccess()){
                //set to current event
                this.currentEvent = e;
                //Set the fields of update to match currentEvent
                this.setManageFields();
            }
        }
        else
        {
            //Tell the user what went wrong
            this.manageEvServerText.setText(response.toString());
        }
        
        this.setEnabledManagePanel(true);
    }//GEN-LAST:event_manageEvUpdateButtonActionPerformed

    private void manageInvInviteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageInvInviteButtonActionPerformed
        ServerResponse resp;
        String invitee;
        User u;
        
        this.setEnabledManagePanel(false);
        this.manageInvServerText.setText("Processing request...");
        
        invitee = this.manageInvInviteField.getText();
        resp = this.controller.checkForUser(new User(invitee));
        
        if(resp.getSuccess())
        {
            u = this.view.getUser(invitee);
            if(u == null)
            {
                this.manageInvServerText.setText("Error inviting that user! "
                        + "Either it doesn't exist, or another error was "
                        + "encountered. Try again!");
            }
            else if(!u.checkForInvite(this.currentEvent.getId()))
            {             
                u.addInvite(this.currentEvent.getId());               
                resp = this.controller.updateUser(u); 
                
                if(resp.getSuccess())
                {                  
                    this.currentEvent.addInvitee(invitee);
                    this.controller.updateEvent(this.currentEvent);             
                    this.setManageFields();               
                    
                    try{
                        Mail.sendEmail(invitee, 
                                Factory.createTitle(this.currentEvent), 
                                Factory.createInviteMessage(this.currentEvent));                   
                    }catch(Exception ex){
                        ex.printStackTrace();
                        System.out.println("An email was bad.");
                    }
                    
                    this.manageInvServerText.setText("Request has been sent to " + invitee);
                }
                else
                {
                    this.manageInvServerText.setText(resp.getMessage());
                }
            }
            else
            {
                this.manageInvServerText.setText(invitee + " has already been invited to this event!");
            }
        }
        else
        {
            this.manageInvServerText.setText(resp.getMessage());
        }
        
        this.setEnabledManagePanel(true);
    }//GEN-LAST:event_manageInvInviteButtonActionPerformed

    private void inviteEvNameListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_inviteEvNameListValueChanged
        if(this.inviteEvNameList.getSelectedIndex() != -1)
        {
            this.currentEvent = this.relevantEvents.get( this.inviteEvNameList.getSelectedIndex() );
            this.setInviteFieldSelectState();
        }
    }//GEN-LAST:event_inviteEvNameListValueChanged

    private void inviteAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteAcceptButtonActionPerformed
        if(this.currentEvent != null)
        {
            this.currentUser.removeInvite(this.currentEvent.getId());
            this.currentEvent.inviteeAccept(this.currentUser.getEmail()); 
            
            //update the info
            this.controller.updateUser(this.currentUser);
            this.controller.updateEvent(this.currentEvent);
            
            //reset
            this.currentEvent = null;
            this.setInviteFieldBlankState();
        }
    }//GEN-LAST:event_inviteAcceptButtonActionPerformed

    private void inviteRejectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteRejectButtonActionPerformed
        if(this.currentEvent != null)
        {
            this.currentUser.removeInvite(this.currentEvent.getId());
            this.currentEvent.inviteeReject(this.currentUser.getEmail()); 
            
            //update the info
            this.controller.updateUser(this.currentUser);
            this.controller.updateEvent(this.currentEvent);
            
            //reset
            this.currentEvent = null;
            this.setInviteFieldBlankState();
        }
    }//GEN-LAST:event_inviteRejectButtonActionPerformed

    private void loginCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginCreateButtonActionPerformed
        String email;
        ServerResponse resp;
        //Tell the user we're processing, disable
        this.loginServText.setText("Processing request...");
        this.setEnabledLoginPanel(false);
        email = this.loginUserField.getText();
        
        if(email.equals(""))
        {
            this.loginServText.setText("The email field is blank!");
        }
        else if(email.contains("'"))
        {
            this.loginServText.setText("Email can contain no single quotes!");
        }
        else if(this.controller != null)
        {
            resp = this.controller.addUser(new User(email));
            this.loginServText.setText(resp.getMessage());
        }
        else
        {
            this.loginServText.setText("Encountered an unexpected error - please try again!");
        }
        
        this.setEnabledLoginPanel(true);
    }//GEN-LAST:event_loginCreateButtonActionPerformed

    private void manageDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDeleteButtonActionPerformed
        this.setEnabledManagePanel(false);
        if(this.controller.deleteEvent(currentEvent).getSuccess())
        {
            this.currentEvent = null;
            this.relevantEvents = null; 
            this.resetMainPanel();
            CardLayout cl = (CardLayout)(cardContainer.getLayout());
            cl.show(cardContainer, "main"); 
        }
        this.setEnabledManagePanel(true);
    }//GEN-LAST:event_manageDeleteButtonActionPerformed
   
    private ArrayList<String> getCreateWeather()
    {
        //Initialize the crap
        ArrayList<String> goodWeather = new ArrayList();
        
        //Get weather radio buttons
        if(this.cWeatherClearRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_CLEAR]);
        }
        if(this.cWeatherScatteredRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_SCATTERED]);
        }
        if(this.cWeatherPartlyRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_PARTLY]);
        }
        if(this.cWeatherMostlyRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_MOSTLY]);
        }
        if(this.cWeatherOvercastRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_OVERCAST]);
        }
        if(this.cWeatherChanceRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_CHANCE]);
        }
        if(this.cWeatherDrizzleRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_DRIZZLE]);
        }
        if(this.cWeatherRainRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_RAIN]);
        }
        if(this.cWeatherFogRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_FOG]);
        }
        if(this.cWeatherMistRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_MIST]);
        }
        if(this.cWeatherSnowRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_SNOW]);
        }
        if(this.cWeatherHailRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_HAIL]);
        }
        if(this.cWeatherStormRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_STORM]);
        }
        
        return goodWeather;
    }
    
    private ArrayList<String> getManageWeather()
    {
        //Initialize the crap
        ArrayList<String> goodWeather = new ArrayList();
        
        //Get weather radio buttons
        if(this.mWeatherChanceRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_CLEAR]);
        }
        if(this.mWeatherScatteredRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_SCATTERED]);
        }
        if(this.mWeatherPartlyRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_PARTLY]);
        }
        if(this.mWeatherMostlyRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_MOSTLY]);
        }
        if(this.mWeatherOvercastRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_OVERCAST]);
        }
        if(this.mWeatherChanceRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_CHANCE]);
        }
        if(this.mWeatherDrizzleRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_DRIZZLE]);
        }
        if(this.mWeatherRainRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_RAIN]);
        }
        if(this.mWeatherFogRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_FOG]);
        }
        if(this.mWeatherMistRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_MIST]);
        }
        if(this.mWeatherSnowRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_SNOW]);
        }
        if(this.mWeatherHailRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_HAIL]);
        }
        if(this.mWeatherStormRadio.isSelected())
        {
            goodWeather.add(Weather.WEATHER_STRINGS[Weather.W_INDEX_STORM]);
        }
        
        return goodWeather;
    }
    
    private void setManageWeather(ArrayList<String> weather)
    {
        boolean val;

        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_CHANCE]);
        this.mWeatherChanceRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_CLEAR]);
        this.mWeatherClearRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_DRIZZLE]);
        this.mWeatherDrizzleRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_FOG]);
        this.mWeatherFogRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_HAIL]);
        this.mWeatherHailRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_MIST]);
        this.mWeatherMistRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_MOSTLY]);
        this.mWeatherMostlyRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_OVERCAST]);
        this.mWeatherOvercastRadio.setSelected(val);

        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_PARTLY]);
        this.mWeatherPartlyRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_RAIN]);
        this.mWeatherRainRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_SCATTERED]);
        this.mWeatherScatteredRadio.setSelected(val);
        
        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_SNOW]);
        this.mWeatherSnowRadio.setSelected(val);

        val = weather.contains(Weather.WEATHER_STRINGS[Weather.W_INDEX_STORM]);
        this.mWeatherStormRadio.setSelected(val);
    }
    
    /**
     * Method that disables all the interactive elements in the create panel,
     * so the user doesn't touch things and mess them up while we're getting data
     */
    private void setEnabledCreatePanel(boolean toSet)
    {
        this.cWeatherChanceRadio.setEnabled(toSet);
        this.cWeatherClearRadio.setEnabled(toSet);
        this.cWeatherDrizzleRadio.setEnabled(toSet);
        this.cWeatherFogRadio.setEnabled(toSet);
        this.cWeatherHailRadio.setEnabled(toSet);
        this.cWeatherMistRadio.setEnabled(toSet);
        this.cWeatherMostlyRadio.setEnabled(toSet);
        this.cWeatherOvercastRadio.setEnabled(toSet);
        this.cWeatherPartlyRadio.setEnabled(toSet);
        this.cWeatherRainRadio.setEnabled(toSet);
        this.cWeatherScatteredRadio.setEnabled(toSet);
        this.cWeatherSnowRadio.setEnabled(toSet);
        this.cWeatherStormRadio.setEnabled(toSet);
        this.cWeatherWarningField.setEnabled(toSet);
        
        this.createCreateButton.setEnabled(toSet);
        this.createDateField.setEnabled(toSet);
        this.createDescriptionText.setEnabled(toSet);
        this.createLocationCombo.setEnabled(toSet);
        this.createMainButton.setEnabled(toSet);
        this.createNameField.setEnabled(toSet);
    }
    
    /**
     * Method that disables all the interactive elements in the manageEv panel,
     * so the user doesn't touch things and mess them up while we're getting data
     */
    private void setEnabledManagePanel(boolean toSet)
    {
        this.mWeatherChanceRadio.setEnabled(toSet);
        this.mWeatherClearRadio.setEnabled(toSet);
        this.mWeatherDrizzleRadio.setEnabled(toSet);
        this.mWeatherFogRadio.setEnabled(toSet);
        this.mWeatherHailRadio.setEnabled(toSet);
        this.mWeatherMistRadio.setEnabled(toSet);
        this.mWeatherMostlyRadio.setEnabled(toSet);
        this.mWeatherOvercastRadio.setEnabled(toSet);
        this.mWeatherPartlyRadio.setEnabled(toSet);
        this.mWeatherRainRadio.setEnabled(toSet);
        this.mWeatherScatteredRadio.setEnabled(toSet);
        this.mWeatherSnowRadio.setEnabled(toSet);
        this.mWeatherStormRadio.setEnabled(toSet);
        this.mWeatherWarningField.setEnabled(toSet);
        
        this.manageEvTab.setEnabled(toSet);
        this.manageEvChooseButton.setEnabled(toSet);
        this.manageEvDateField.setEnabled(toSet);
        this.manageEvDescriptionText.setEnabled(toSet);
        this.manageEvLocationCombo.setEnabled(toSet);
        this.manageEvMainButton.setEnabled(toSet);
        this.manageEvNameField.setEnabled(toSet);
        this.manageEvServerText.setEnabled(toSet);
        this.manageEvUpdateButton.setEnabled(toSet);
        
        this.manageInvChooseButton.setEnabled(toSet);
        this.manageInvInviteButton.setEnabled(toSet);
        this.manageInvInviteField.setEnabled(toSet);
        this.manageInvMainButton.setEnabled(toSet);
        this.manageDeleteButton.setEnabled(toSet);
    }
    
    private void setEnabledLoginPanel(boolean toSet)
    {
        this.loginButton.setEnabled(toSet);
        this.loginUserField.setEnabled(toSet);
        this.loginCreateButton.setEnabled(toSet);
    }
    
    /**
     * Method that sets all the fields in the "manage event" panel, using the 
     * this.currentEvent variable
     */
    private void setManageFields()
    {       
        this.setManageWeather(this.currentEvent.getGoodWeather());
        
        this.manageEvDateField.setText(Factory.calendarToString(this.currentEvent.getDate()));
        this.manageEvNameField.setText(this.currentEvent.getName());
        this.manageEvDescriptionText.setText(this.currentEvent.getDescription());
        this.manageEvServerText.setText("");
        this.mWeatherWarningField.setText(this.currentEvent.getWarningPeriod() + "");
        
        this.manageEvLocationCombo.setSelectedItem(this.currentEvent.getLocation());
        
        this.manageInvAttendList.setListData(this.currentEvent.getAccepted().toArray());
        this.manageInvInvitedList.setListData(this.currentEvent.getInvited().toArray());
        this.manageInvInviteField.setText("");
        this.manageInvServerText.setText("");
    }
    
    private void setChooseFields()
    {
        ArrayList<String> evNames;
        //get the events created by the current user
        this.relevantEvents = this.view.getEventsCreated(this.currentUser);
        evNames = new ArrayList<String>();
        
        for(Event e : this.relevantEvents)
        {
            evNames.add(e.getName());
        }
        
        //set the list of events we can choose 
        this.chooseEvList.setListData(evNames.toArray());
        this.chooseEvList.setSelectedIndex(-1);
    }
    
    private void setInviteFieldBlankState()
    {
        ArrayList<String> evNames;
        this.relevantEvents = this.view.getEventsInvited(currentUser);
        evNames = new ArrayList<String>();
        
        for(Event e : this.relevantEvents)
        {
            evNames.add(e.getName());
        }
        
        this.inviteEvNameList.setListData(evNames.toArray());
        this.inviteEvNameList.setSelectedIndex(-1);
        
        this.inviteDateField.setText("");
        this.inviteDescriptionText.setText("");
        this.inviteLocationField.setText("");
        this.inviteSenderField.setText("");
    }
    
    private void setInviteFieldSelectState()
    {
        this.inviteDateField.setText(Factory.calendarToString(this.currentEvent.getDate()));
        this.inviteDescriptionText.setText(this.currentEvent.getDescription());
        this.inviteLocationField.setText(this.currentEvent.getLocation());
        this.inviteSenderField.setText(this.currentEvent.getCreator());
    }
    
    /**
     * Method that enables all the interactive elements of the create panel,
     * and defaults the values
     */
    private void resetCreatePanel()
    {
        this.setEnabledCreatePanel(true);
        
        final boolean RADIO_DEFAULT = true;
        final String WARNING_DEFAULT = "X Days";
        final String DATE_DEFAULT = "mm/dd/yyyy";
        final String NAME_DEFAULT = "Event Name";
        final String DESCRIPTION_DEFAULT = "Enter your description here!";
        final int COMBO_DEFAULT = -1;
        
        this.cWeatherChanceRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherClearRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherDrizzleRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherFogRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherHailRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherMistRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherMostlyRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherOvercastRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherPartlyRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherRainRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherScatteredRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherSnowRadio.setSelected(RADIO_DEFAULT);
        this.cWeatherStormRadio.setSelected(RADIO_DEFAULT);
        
        this.cWeatherWarningField.setText(WARNING_DEFAULT);
        this.createDateField.setText(DATE_DEFAULT);
        this.createNameField.setText(NAME_DEFAULT);
        this.createLocationCombo.setSelectedIndex(COMBO_DEFAULT);
        this.createDescriptionText.setText(DESCRIPTION_DEFAULT);
        
        this.createServerText.setText("");
    }
    
    public void resetMainPanel()
    {
        if(this.currentUser == null)
        {
            this.mainServText.setText("CURRENT USER IS NULL");
        }
        else
        {
            int length = this.currentUser.getInvites().size();
            
            switch(length) {
                case 0:
                    this.mainServText.setText("You have no pending invites.");
                    break;
                case 1:
                    this.mainServText.setText("You have 1 pending invite.");
                    break;
                default:
                    this.mainServText.setText("You have " + length + " pending invites.");
                    break;                
            }
        }
    }
    
    public void resetLoginPanel()
    {
        this.loginServText.setText("");
        this.loginUserField.setText("");
    }    
            
    public void appWideMessage(String message)
    {
        this.loginServText.setText(message);
        this.createServerText.setText(message);
        this.mainServText.setText(message);
        this.manageEvServerText.setText(message);
        this.manageInvServerText.setText(message);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton cWeatherChanceRadio;
    private javax.swing.JRadioButton cWeatherClearRadio;
    private javax.swing.JRadioButton cWeatherDrizzleRadio;
    private javax.swing.JRadioButton cWeatherFogRadio;
    private javax.swing.JRadioButton cWeatherHailRadio;
    private javax.swing.JRadioButton cWeatherMistRadio;
    private javax.swing.JRadioButton cWeatherMostlyRadio;
    private javax.swing.JRadioButton cWeatherOvercastRadio;
    private javax.swing.JRadioButton cWeatherPartlyRadio;
    private javax.swing.JRadioButton cWeatherRainRadio;
    private javax.swing.JRadioButton cWeatherScatteredRadio;
    private javax.swing.JRadioButton cWeatherSnowRadio;
    private javax.swing.JRadioButton cWeatherStormRadio;
    private javax.swing.JTextField cWeatherWarningField;
    private javax.swing.JLabel cWeatherWarningLabel;
    private javax.swing.JPanel cardContainer;
    private javax.swing.JButton chooseChooseButton;
    private javax.swing.JLabel chooseEvLabel;
    private javax.swing.JList chooseEvList;
    private javax.swing.JPanel chooseEvPanel;
    private javax.swing.JButton chooseMainButton;
    private javax.swing.JScrollPane chooseScroll;
    private javax.swing.JButton createCreateButton;
    private javax.swing.JTextField createDateField;
    private javax.swing.JLabel createDateLabel;
    private javax.swing.JLabel createDescriptionLabel;
    private javax.swing.JScrollPane createDescriptionPane;
    private javax.swing.JTextArea createDescriptionText;
    private javax.swing.JPanel createEvPanel;
    private javax.swing.JComboBox createLocationCombo;
    private javax.swing.JLabel createLocationLabel;
    private javax.swing.JButton createMainButton;
    private javax.swing.JTextField createNameField;
    private javax.swing.JLabel createNameLabel;
    private javax.swing.JLabel createServerLabel;
    private javax.swing.JScrollPane createServerScroll;
    private javax.swing.JTextArea createServerText;
    private javax.swing.JPanel createWeatherPanel;
    private javax.swing.JButton inviteAcceptButton;
    private javax.swing.JTextField inviteDateField;
    private javax.swing.JLabel inviteDateLabel;
    private javax.swing.JLabel inviteDescriptionLabel;
    private javax.swing.JScrollPane inviteDescriptionScroll;
    private javax.swing.JTextArea inviteDescriptionText;
    private javax.swing.JLabel inviteEvNameLabel;
    private javax.swing.JList inviteEvNameList;
    private javax.swing.JScrollPane inviteEvNameScroll;
    private javax.swing.JTextField inviteLocationField;
    private javax.swing.JLabel inviteLocationLabel;
    private javax.swing.JButton inviteMainButton;
    private javax.swing.JPanel invitePanel;
    private javax.swing.JButton inviteRejectButton;
    private javax.swing.JTextField inviteSenderField;
    private javax.swing.JLabel inviteSenderLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton loginCreateButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JScrollPane loginScrollPane;
    private javax.swing.JLabel loginServLabel;
    private javax.swing.JTextArea loginServText;
    private javax.swing.JTextField loginUserField;
    private javax.swing.JLabel loginUserLabel;
    private javax.swing.JRadioButton mWeatherChanceRadio;
    private javax.swing.JRadioButton mWeatherClearRadio;
    private javax.swing.JRadioButton mWeatherDrizzleRadio;
    private javax.swing.JRadioButton mWeatherFogRadio;
    private javax.swing.JRadioButton mWeatherHailRadio;
    private javax.swing.JRadioButton mWeatherMistRadio;
    private javax.swing.JRadioButton mWeatherMostlyRadio;
    private javax.swing.JRadioButton mWeatherOvercastRadio;
    private javax.swing.JRadioButton mWeatherPartlyRadio;
    private javax.swing.JRadioButton mWeatherRainRadio;
    private javax.swing.JRadioButton mWeatherScatteredRadio;
    private javax.swing.JRadioButton mWeatherSnowRadio;
    private javax.swing.JRadioButton mWeatherStormRadio;
    private javax.swing.JTextField mWeatherWarningField;
    private javax.swing.JLabel mWeatherWarningLabel;
    private javax.swing.JButton mainAdminButton;
    private javax.swing.JButton mainCrtEvtButton;
    private javax.swing.JButton mainInviteButton;
    private javax.swing.JButton mainLogoutButton;
    private javax.swing.JPanel mainMenuPanel;
    private javax.swing.JButton mainMngEvtButton;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JLabel mainServLabel;
    private javax.swing.JTextArea mainServText;
    private javax.swing.JPanel manageCreatePanel;
    private javax.swing.JButton manageDeleteButton;
    private javax.swing.JPanel manageDeletePanel;
    private javax.swing.JButton manageEvChooseButton;
    private javax.swing.JTextField manageEvDateField;
    private javax.swing.JLabel manageEvDateLabel;
    private javax.swing.JLabel manageEvDescriptionLabel;
    private javax.swing.JScrollPane manageEvDescriptionScroll;
    private javax.swing.JTextArea manageEvDescriptionText;
    private javax.swing.JComboBox manageEvLocationCombo;
    private javax.swing.JLabel manageEvLocationLabel;
    private javax.swing.JButton manageEvMainButton;
    private javax.swing.JTextField manageEvNameField;
    private javax.swing.JLabel manageEvNameLabel;
    private javax.swing.JButton manageEvResetButton;
    private javax.swing.JLabel manageEvServerLabel;
    private javax.swing.JScrollPane manageEvServerScroll;
    private javax.swing.JTextArea manageEvServerText;
    private javax.swing.JTabbedPane manageEvTab;
    private javax.swing.JButton manageEvUpdateButton;
    private javax.swing.JPanel manageEvWeatherPanel;
    private javax.swing.JList manageInvAttendList;
    private javax.swing.JScrollPane manageInvAttendScroll;
    private javax.swing.JLabel manageInvAttendingLabel;
    private javax.swing.JButton manageInvChooseButton;
    private javax.swing.JButton manageInvInviteButton;
    private javax.swing.JTextField manageInvInviteField;
    private javax.swing.JLabel manageInvInvitedLabel;
    private javax.swing.JList manageInvInvitedList;
    private javax.swing.JScrollPane manageInvInvitedScroll;
    private javax.swing.JButton manageInvMainButton;
    private javax.swing.JLabel manageInvServerLabel;
    private javax.swing.JScrollPane manageInvServerScroll;
    private javax.swing.JTextArea manageInvServerText;
    private javax.swing.JPanel manageInvitePanel;
    // End of variables declaration//GEN-END:variables
}
